/*
У банка есть клиенты. Каждый клиент имеет ровно один счет.

Напишите программу, которая будет выполнять последовательность запросов таких двух видов:

Начинается с числа 1, затем через пробел следует имя клиента (слово из латинских букв), далее через пробел идет сумма денег, которую клиент кладет или берет из счета в банке (целое число, не превышает по модулю 10000).
Начинается с числа 2, через пробел следует имя клиента. На каждый такой запрос программа должна ответить какая сумма в данный момент есть на счету заданного клиента. Если такое имя клиента пока ни разу не упоминалось в запросах вида 1, выводите вместо числа слово «ERROR».
В начале работы программы у всех клиентов на счету 0. Затем суммы могут становиться как положительными, так и отрицательными.

Обратите внимание, что в ситуации, когда клиент снял суммарно ровно столько же денег, сколько положил, сумма на счете становится равной 0, но, раз его имя уже встречалось, нулевое значение не является основанием выводить «ERROR».

Для решения задачи используйте ассоциативный контейнер.

Формат ввода
Первая строка стандартного входного потока количество запросов N (1 ≤ N ≤ 105). Далее следуют N строк в каждой из которых описан один из двух описанных выше видов запроса.

Формат вывода
На каждый запрос 2-го вида нужно вывести текущее значение на счету заданного клиента (или слово «ERROR»).
 */

#include <exception>
#include <iostream>
#include <string>
#include <unordered_map>

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  size_t size;
  std::cin >> size;
  std::string string;
  std::unordered_map<std::string, int64_t> names;
  int mode;
  int64_t buffer;
  for (size_t i = 0; i < size; i++) {
    std::cin >> mode;
    std::cin >> string;
    if (mode == 1) {
      std::cin >> buffer;
      try {
        names.at(string) += buffer;
      } catch (const std::exception &exception) {
        names.emplace(string, buffer);
      }
    } else {
      try {
        std::cout << names.at(string) << std::endl;
      } catch (const std::exception &exception) {
        std::cout << "ERROR" << std::endl;
      }
    }
  }
  return 0;
}

