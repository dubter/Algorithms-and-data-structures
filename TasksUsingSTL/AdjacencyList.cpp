/*
В этой задаче необходимо организовать неориентированный граф, на котором поддерживаются следующие операции:

AddEdge(u, v) — добавить в граф ребро между вершинами (u, v).
Vertex(u) — вывести список вершин, смежных с вершиной u.
Петель и кратных ребер в графе нет. Для решения данной задачи используйте последовательные контейнеры из STL.

Формат ввода
В первой строке входного файла содержится целое число N (1 ≤ N ≤ 106) — количество вершин в графе.

В следующей строке находится целое числоK (0 ≤ K ≤ 106) — число операций, затем идет описание операций — каждое в своей строке.

Операции имеют следующий формат: «1 u v » или «2 u », обозначающие соответственно операции AddEdge(u, v) и Vertex(u).

Гарантируется, что суммарное количество чисел, которое будет необходимо вывести при выполнении всех операций Vertex не превосходит 2⋅ 105.

Формат вывода
В выходной файл для каждой команды Vertex необходимо на отдельной строке вывести список смежных вершин указанной вершины. Вершины списка смежности нужно выводить в порядке добавления соответствующих ребер в граф.
 */

#include <algorithm>
#include <iostream>
#include <vector>

int main() {
  size_t n, m;
  std::cin >> n;
  std::vector<std::vector<size_t>> numbers;
  numbers.resize(n + 1);
  std::cin >> m;
  int mode;
  size_t size;
  size_t first, second;
  for (size_t i = 0; i < m; i++) {
    std::cin >> mode;
    std::cin >> first;
    if (mode == 1) {
      std::cin >> second;
      numbers[first].emplace_back(second);
      numbers[second].emplace_back(first);
    } else {
      size = numbers[first].size();
      if (size == 0) {
        std::cout << "\n";
      } else {
        for (size_t j = 0; j < size; j++) {
          std::cout << numbers[first][j] << " ";
        }
        std::cout << "\n";
      }
    }
  }
  return 0;
}
